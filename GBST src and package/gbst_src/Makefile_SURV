ifndef config
ifneq ("$(wildcard ./config.mk)","")
	config = config.mk
else
	config = make/config.mk
endif
endif

ifndef DMLC_CORE
	DMLC_CORE = dmlc-core
endif

ifndef RABIT
	RABIT = rabit
endif

ROOTDIR = $(CURDIR)

# workarounds for some buggy old make & msys2 versions seen in windows
ifeq (NA, $(shell test ! -d "$(ROOTDIR)" && echo NA ))
        $(warning Attempting to fix non-existing ROOTDIR [$(ROOTDIR)])
        ROOTDIR := $(shell pwd)
        $(warning New ROOTDIR [$(ROOTDIR)] $(shell test -d "$(ROOTDIR)" && echo " is OK" ))
endif
MAKE_OK := $(shell "$(MAKE)" -v 2> /dev/null)
ifndef MAKE_OK
        $(warning Attempting to recover non-functional MAKE [$(MAKE)])
        MAKE := $(shell which make 2> /dev/null)
        MAKE_OK := $(shell "$(MAKE)" -v 2> /dev/null)
endif
$(warning MAKE [$(MAKE)] - $(if $(MAKE_OK),checked OK,PROBLEM))

ifeq ($(OS), Windows_NT)
	UNAME="Windows"
else
	UNAME=$(shell uname)
endif

include $(config)
ifeq ($(USE_OPENMP), 0)
	export NO_OPENMP = 1
endif
include $(DMLC_CORE)/make/dmlc.mk

# set compiler defaults for OSX versus *nix
# let people override either
OS := $(shell uname)
ifeq ($(OS), Darwin)
ifndef CC
export CC = $(if $(shell which clang), clang, gcc)
endif
ifndef CXX
export CXX = $(if $(shell which clang++), clang++, g++)
endif
else
# linux defaults
ifndef CC
export CC = gcc
endif
ifndef CXX
export CXX = g++
endif
endif

export LDFLAGS= -pthread -lm $(ADD_LDFLAGS) $(DMLC_LDFLAGS)
export CFLAGS= -DDMLC_LOG_CUSTOMIZE=1 -std=c++11 -Wall -Wno-unknown-pragmas -Iinclude $(ADD_CFLAGS)
CFLAGS += -I$(DMLC_CORE)/include -I$(RABIT)/include -I$(GTEST_PATH)/include
#java include path
export JAVAINCFLAGS = -I${JAVA_HOME}/include -I./java

ifeq ($(TEST_COVER), 1)
	CFLAGS += -g -O0 -fprofile-arcs -ftest-coverage
else
	CFLAGS += -O3 -funroll-loops
ifeq ($(USE_SSE), 1)
	CFLAGS += -msse2
endif
endif

ifndef LINT_LANG
	LINT_LANG= "all"
endif

ifeq ($(UNAME), Windows)
	SURVBOOST_DYLIB = lib/survboost.dll
	JAVAINCFLAGS += -I${JAVA_HOME}/include/win32
else
ifeq ($(UNAME), Darwin)
	SURVBOOST_DYLIB = lib/survboost.dylib
	CFLAGS += -fPIC
else
	SURVBOOST_DYLIB = lib/libsurvboost.so
	CFLAGS += -fPIC
endif
endif

ifeq ($(UNAME), Linux)
	LDFLAGS += -lrt
	JAVAINCFLAGS += -I${JAVA_HOME}/include/linux
endif

ifeq ($(UNAME), Darwin)
	JAVAINCFLAGS += -I${JAVA_HOME}/include/darwin
endif

OPENMP_FLAGS =
ifeq ($(USE_OPENMP), 1)
	OPENMP_FLAGS = -fopenmp
else
	OPENMP_FLAGS = -DDISABLE_OPENMP
endif
CFLAGS += $(OPENMP_FLAGS)

# specify tensor path
.PHONY: clean all lint clean_all doxygen rcpplint pypack Rpack Rbuild Rcheck java pylint

all: lib/libsurvboost.a $(SURVBOOST_DYLIB) survboost

$(DMLC_CORE)/libdmlc.a: $(wildcard $(DMLC_CORE)/src/*.cc $(DMLC_CORE)/src/*/*.cc)
	+ cd $(DMLC_CORE); "$(MAKE)" libdmlc.a config=$(ROOTDIR)/$(config); cd $(ROOTDIR)

$(RABIT)/lib/$(LIB_RABIT): $(wildcard $(RABIT)/src/*.cc)
	+ cd $(RABIT); "$(MAKE)" lib/$(LIB_RABIT) USE_SSE=$(USE_SSE); cd $(ROOTDIR)

jvm: jvm-packages/lib/libsurvboost4j.so

SRC = $(wildcard src/*.cc src/*/*.cc)
ALL_OBJ = $(patsubst src/%.cc, build/%.o, $(SRC))
AMALGA_OBJ = amalgamation/survboost-all0.o
LIB_DEP = $(DMLC_CORE)/libdmlc.a $(RABIT)/lib/$(LIB_RABIT)
ALL_DEP = $(filter-out build/cli_main.o, $(ALL_OBJ)) $(LIB_DEP)
CLI_OBJ = build/cli_main.o
include tests/cpp/survboost_test.mk

build/%.o: src/%.cc
	@mkdir -p $(@D)
	$(CXX) $(CFLAGS) -MM -MT build/$*.o $< >build/$*.d
	$(CXX) -c $(CFLAGS) $< -o $@

# The should be equivalent to $(ALL_OBJ)  except for build/cli_main.o
amalgamation/survboost-all0.o: amalgamation/survboost-all0.cc
	$(CXX) -c $(CFLAGS) $< -o $@

# Equivalent to lib/libsurvboost_all.so
lib/libsurvboost_all.so: $(AMALGA_OBJ) $(LIB_DEP)
	@mkdir -p $(@D)
	$(CXX) $(CFLAGS) -shared -o $@ $(filter %.o %.a, $^) $(LDFLAGS)

lib/libsurvboost.a: $(ALL_DEP)
	@mkdir -p $(@D)
	ar crv $@ $(filter %.o, $?)

lib/survboost.dll lib/libsurvboost.so lib/libsurvboostdylib: $(ALL_DEP)
	@mkdir -p $(@D)
	$(CXX) $(CFLAGS) -shared -o $@ $(filter %.o %a,  $^) $(LDFLAGS)

jvm-packages/lib/libsurvboost4j.so: jvm-packages/survboost4j/src/native/survboost4j.cpp $(ALL_DEP)
	@mkdir -p $(@D)
	$(CXX) $(CFLAGS) $(JAVAINCFLAGS) -shared -o $@ $(filter %.cpp %.o %.a, $^) $(LDFLAGS)


survboost: $(CLI_OBJ) $(ALL_DEP)
	$(CXX) $(CFLAGS) -o $@  $(filter %.o %.a, $^)  $(LDFLAGS)

rcpplint:
	python3 dmlc-core/scripts/lint.py survboost ${LINT_LANG} R-package/src

lint: rcpplint
	python3 dmlc-core/scripts/lint.py --exclude_path python-package/survboost/dmlc-core \
	  python-package/survboost/include python-package/survboost/lib \
	  python-package/survboost/make python-package/survboost/rabit \
	  python-package/survboost/src --pylint-rc ${PWD}/python-package/.pylintrc survboost \
	  ${LINT_LANG} include src python-package

pylint:
	flake8 --ignore E501 python-package
	flake8 --ignore E501 tests/python

test: $(ALL_TEST)
	$(ALL_TEST)

check: test
	./tests/cpp/survboost_test

ifeq ($(TEST_COVER), 1)
cover: check
	@- $(foreach COV_OBJ, $(COVER_OBJ), \
		gcov -pbcul -o $(shell dirname $(COV_OBJ)) $(COV_OBJ) > gcov.log || cat gcov.log; \
	)
endif

clean:
	$(RM) -rf build lib bin *~ */*~ */*/*~ */*/*/*~ */*.o */*/*.o */*/*/*.o #survboost
	$(RM) -rf build_tests *.gcov tests/cpp/survboost_test
	if [ -d "R-package/src" ]; then \
		cd R-package/src; \
		$(RM) -rf rabit src include dmlc-core amalgamation *.so *.dll; \
		cd $(ROOTDIR); \
	fi

clean_all: clean
	cd $(DMLC_CORE); "$(MAKE)" clean; cd $(ROOTDIR)
	cd $(RABIT); "$(MAKE)" clean; cd $(ROOTDIR)

doxygen:
	doxygen doc/Doxyfile

# create standalone python tar file.
pypack: ${SURVBOOST_DYLIB}
	cp ${SURVBOOST_DYLIB} python-package/survboost
	cd python-package; tar cf survboost.tar survboost; cd ..

# create pip source dist (sdist) pack for PyPI
pippack: clean_all
	rm -rf survboost-python
# remove symlinked directories in python-package/survboost
	rm -rf python-package/survboost/lib
	rm -rf python-package/survboost/dmlc-core
	rm -rf python-package/survboost/include
	rm -rf python-package/survboost/make
	rm -rf python-package/survboost/rabit
	rm -rf python-package/survboost/src
	cp -r python-package survboost-python
	cp -r Makefile survboost-python/survboost/
	cp -r make survboost-python/survboost/
	cp -r src survboost-python/survboost/
	cp -r tests survboost-python/survboost/
	cp -r include survboost-python/survboost/
	cp -r dmlc-core survboost-python/survboost/
	cp -r rabit survboost-python/survboost/
# Use setup_pip.py instead of setup.py
	mv survboost-python/setup_pip.py survboost-python/setup.py
# Build sdist tarball
	cd survboost-python; python setup.py sdist; mv dist/*.tar.gz ..; cd ..

# Script to make a clean installable R package.
Rpack: clean_all
	rm -rf survboost survboost*.tar.gz
	cp -r R-package survboost
	rm -rf survboost/src/*.o survboost/src/*.so survboost/src/*.dll
	rm -rf survboost/src/*/*.o
	rm -rf survboost/demo/*.model survboost/demo/*.buffer survboost/demo/*.txt
	rm -rf survboost/demo/runall.R
	cp -r src survboost/src/src
	cp -r include survboost/src/include
	cp -r amalgamation survboost/src/amalgamation
	mkdir -p survboost/src/rabit
	cp -r rabit/include survboost/src/rabit/include
	cp -r rabit/src survboost/src/rabit/src
	rm -rf survboost/src/rabit/src/*.o
	mkdir -p survboost/src/dmlc-core
	cp -r dmlc-core/include survboost/src/dmlc-core/include
	cp -r dmlc-core/src survboost/src/dmlc-core/src
	cp ./LICENSE survboost
	cat R-package/src/Makevars.in|sed '2s/.*/PKGROOT=./' | sed '3s/.*/ENABLE_STD_THREAD=0/' > survboost/src/Makevars.in
	cp survboost/src/Makevars.in survboost/src/Makevars.win
	sed -i -e 's/@OPENMP_CXXFLAGS@/$$\(SHLIB_OPENMP_CXXFLAGS\)/g' survboost/src/Makevars.win
	sed -i -e 's/-pthread/$$\(SHLIB_PTHREAD_FLAGS\)/g' survboost/src/Makevars.win
	bash R-package/remove_warning_suppression_pragma.sh
	rm survboost/remove_warning_suppression_pragma.sh

Rbuild: Rpack
	R CMD build --no-build-vignettes survboost
	rm -rf survboost

Rcheck: Rbuild
	R CMD check survboost*.tar.gz

-include build/*.d
-include build/*/*.d
